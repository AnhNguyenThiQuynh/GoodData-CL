/*
 * Copyright (c) 2009, GoodData Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice, this list of conditions and
 *        the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions
 *        and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *     * Neither the name of the GoodData Corporation nor the names of its contributors may be used to endorse
 *        or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.gooddata.connector.driver;

import com.gooddata.connector.model.PdmColumn;
import com.gooddata.connector.model.PdmSchema;
import com.gooddata.connector.model.PdmTable;
import com.gooddata.integration.model.Column;
import com.gooddata.integration.model.DLIPart;
import com.gooddata.naming.N;
import com.gooddata.util.JdbcUtil;
import com.gooddata.util.StringUtil;
import org.apache.log4j.Logger;

import java.sql.Connection;
import java.sql.SQLException;

/**
 * GoodData Derby SQL driver. Generates the DDL (tables and indexes), DML (transformation SQL) and other
 * SQL statements necessary for the data normalization (lookup generation)
 * @author zd <zd@gooddata.com>
 * @version 1.0
 */
public class DerbySqlDriver extends AbstractSqlDriver implements SqlDriver {
    //TODO: refactor
    private static Logger l = Logger.getLogger(DerbySqlDriver.class);

    /**
     * Default constructor
     */
    public DerbySqlDriver() {
        // autoincrement syntax
        SYNTAX_AUTOINCREMENT = "GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1)";
        SYNTAX_CONCAT_FUNCTION_PREFIX = "";
        SYNTAX_CONCAT_FUNCTION_SUFFIX = "";
        SYNTAX_CONCAT_OPERATOR = " || '" + HASH_SEPARATOR + "' || ";
    }
    
    /**
     * {@inheritDoc}
     */
    public void executeExtractSql(Connection c, PdmSchema schema, String file) throws SQLException {
        l.debug("Extracting data.");
        PdmTable sourceTable = schema.getSourceTable();
        String source = sourceTable.getName();
        String cols = getNonAutoincrementColumns(sourceTable);
        JdbcUtil.executeUpdate(c,
            "CALL SYSCS_UTIL.SYSCS_IMPORT_DATA " +
            "(NULL, '" + source.toUpperCase() + "', '" + cols.toUpperCase() +
            "', null, '" + file + "', null, null, 'utf-8',0)"
        );
        l.debug("Finished extracting data.");
    }

    /**
     * {@inheritDoc}
     */
    public void executeLoadSql(Connection c, PdmSchema schema, DLIPart part, String dir, int[] snapshotIds)
            throws SQLException {
        l.debug("Unloading data.");
        String file = dir + System.getProperty("file.separator") + part.getFileName();
        String cols = getLoadColumns(part, schema);
        String whereClause = getLoadWhereClause(part, schema, snapshotIds);
        String dliTable = getTableNameFromPart(part);
        JdbcUtil.executeUpdate(c,
            "CALL SYSCS_UTIL.SYSCS_EXPORT_QUERY " +
            "('SELECT " + cols + " FROM " + dliTable.toUpperCase() + whereClause + "', '" + file +
            "', null, null, 'utf-8')"
        );
        l.debug("Finished unloading data.");
    }

    /**
     * {@inheritDoc}
     */
    protected void createFunctions(Connection c) throws SQLException {
        l.debug("Creating system functions.");
        JdbcUtil.executeUpdate(c,
            "CREATE FUNCTION ATOD(str VARCHAR(255)) RETURNS DOUBLE\n" +
            " PARAMETER STYLE JAVA NO SQL LANGUAGE JAVA" +
            " EXTERNAL NAME 'com.gooddata.derby.extension.DerbyExtensions.atod'"
        );

        JdbcUtil.executeUpdate(c,
            "CREATE FUNCTION DTTOI(str VARCHAR(255), fmt VARCHAR(30)) RETURNS INT\n" +
            " PARAMETER STYLE JAVA NO SQL LANGUAGE JAVA" +
            " EXTERNAL NAME 'com.gooddata.derby.extension.DerbyExtensions.dttoi'"
        );
        l.debug("System functions creation finished.");
    }

    /**
     * {@inheritDoc}
     */
    protected String getLoadWhereClause(DLIPart part, PdmSchema schema, int[] snapshotIds) {
        String dliTable = getTableNameFromPart(part);
        PdmTable pdmTable = schema.getTableByName(dliTable);
        String whereClause = "";
        if(PdmTable.PDM_TABLE_TYPE_FACT.equals(pdmTable.getType()) && snapshotIds != null && snapshotIds.length > 0) {
            String inClause = "";
            for(int i : snapshotIds) {
                if(inClause.length()>0)
                    inClause += ","+i;
                else
                    inClause = "" + i;
            }
            whereClause = ",SNAPSHOTS WHERE " + dliTable.toUpperCase() +
                    ".ID BETWEEN SNAPSHOTS.FIRSTID and SNAPSHOTS.LASTID AND SNAPSHOTS.ID IN (" + inClause + ")";
        }
        return whereClause;
    }

    /**
     * {@inheritDoc}
     */
    protected String decorateFactColumnForLoad(String cols, Column cl, String table) {
        if (cols.length() > 0)
            cols += ",ATOD(" + table.toUpperCase() + "." +
                    StringUtil.formatShortName(cl.getName())+")";
        else
            cols +=  "ATOD(" + table.toUpperCase() + "." +
                    StringUtil.formatShortName(cl.getName())+")";
        return cols;
    }

    /**
     * {@inheritDoc}
     */
    protected String decorateLookupColumnForLoad(String cols, Column cl, String table) {
        if (cols != null && cols.length() > 0)
            cols += ",CAST(" + table.toUpperCase() + "." + StringUtil.formatShortName(cl.getName())+
                    " AS VARCHAR(128))";
        else
            cols +=  "CAST("+table.toUpperCase() + "." + StringUtil.formatShortName(cl.getName())+
                    " AS VARCHAR(128))";
        return cols;
    }

    /**
     * {@inheritDoc}
     */
    protected String decorateOtherColumnForLoad(String cols, Column cl, String table) {
        if (cols != null && cols.length() > 0)
            cols += "," + table.toUpperCase() + "." + StringUtil.formatShortName(cl.getName());
        else
            cols +=  table.toUpperCase() + "." + StringUtil.formatShortName(cl.getName());
        return cols;
    }

    /**
     * {@inheritDoc}
     */
    protected void insertFactsToFactTable(Connection c, PdmSchema schema) throws SQLException {
        PdmTable factTable = schema.getFactTable();
        PdmTable sourceTable = schema.getSourceTable();
        String fact = factTable.getName();
        String source = sourceTable.getName();
        String factColumns = "";
        String sourceColumns = "";
        for(PdmColumn column : factTable.getFactColumns()) {
            factColumns += "," + column.getName();
            sourceColumns += "," + column.getSourceColumn();
        }

        for(PdmColumn column : factTable.getDateColumns()) {
            factColumns += "," + column.getName();
            sourceColumns += ",DTTOI(" + column.getSourceColumn() + ",'"+column.getFormat()+"')";
        }
        JdbcUtil.executeUpdate(c,
            "INSERT INTO "+fact+"("+N.ID+factColumns+") SELECT "+N.SRC_ID + sourceColumns +
            " FROM " + source + " WHERE "+N.SRC_ID+" > (SELECT MAX(lastid) FROM snapshots WHERE name='"+fact+"')"
        );
    }

    /**
     * {@inheritDoc}
     * Derby SQL catalog is all in uppercase! We need to convert all names to uppercase :(
     * @throws SQLException
     */
    public boolean exists(Connection c, String tbl) throws SQLException {
    	return super.exists(c,tbl.toUpperCase());
    }

    /**
     * {@inheritDoc}
     * Derby SQL catalog is all in uppercase! We need to convert all names to uppercase :(
     * @throws SQLException
     */    
    public boolean exists(Connection c, String tbl, String col) throws SQLException {
    	return super.exists(c,tbl.toUpperCase(), col.toUpperCase());
    }

    
}
