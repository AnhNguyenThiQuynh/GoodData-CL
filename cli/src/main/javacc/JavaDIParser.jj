/*
 * Copyright (c) 2009, GoodData Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice, this list of conditions and
 *        the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions
 *        and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *     * Neither the name of the GoodData Corporation nor the names of its contributors may be used to endorse
 *        or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

PARSER_BEGIN(DIScriptParser)

package com.gooddata.processor.parser;

import java.io.FileReader;
import java.io.Reader;
import org.apache.log4j.Logger;
import java.util.List;
import java.util.ArrayList;
import java.util.Properties;

import com.gooddata.processor.Command;

public class DIScriptParser {

    private static Logger l = Logger.getLogger(DIScriptParser.class);

   
}
PARSER_END(DIScriptParser) 

/**  And now, the actual parsing specifications...... */

/** Skip these characters, they are considered "white space" **/
SKIP :                              
{
    " "
    | "\t"
    | "\r"
    | "\n"

}


TOKEN: /*RESERVED TOKENS FOR UQL */
{
      <SEMICOLON: ";">
   |  <COMMA:  ",">
   |  <LPAREN: "(">
   |  <RPAREN: ")">
   |  <EQUALS: "=">
   
}

TOKEN : /* the keywords and comparators - QUOTEDVALUE accounts for escaped quotes as well */
{
        <NAME: (["A"-"Z","a"-"z","0"-"9"])+ >
|       <STRING: "\"" (~["\""])+ "\"" >
|       <COMMENT: "#"(~["\n","\r"])* ("\n"|"\r"|"\r\n")? >
}


List<Command> parse() :
{
    List<Command> commands = new ArrayList<Command>();
    Command c;
}
{
    (<COMMENT> | c = command(){commands.add(c);})* {return commands;}       // a query followed by optional sort
}

Command command() :
{
    Command c;
    Token t;
    Properties p;
}
{            
	t = <NAME>{c=new Command(t.image);}<LPAREN>p = parameters(){c.setParameters(p);}<RPAREN><SEMICOLON>{return c;}
}

Properties parameters() :
{
    Properties prop = new Properties();
    String[] v1;
}
{
	(v1=parameter() {prop.put(v1[0],v1[1]);}(<COMMA>)?)* {return prop;}
}

String[] parameter() :
{
    Token name;
    Token value;
}
{
	name=<NAME><EQUALS>value=<STRING>{return new String[]{name.image,value.image.replace("\"","")};}
}
