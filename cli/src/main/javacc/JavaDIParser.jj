/*
 * Copyright (c) 2009 GoodData Corporation.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Redistributions in any form must be accompanied by information on
 *    how to obtain complete source code for this software and any
 *    accompanying software that uses this software.  The source code
 *    must either be included in the distribution or be available for no
 *    more than the cost of distribution plus a nominal fee, and must be
 *    freely redistributable under reasonable conditions.  For an
 *    executable file, complete source code means the source code for all
 *    modules it contains.  It does not include source code for modules or
 *    files that typically accompany the major components of the operating
 *    system on which the executable file runs.
 *
 * THIS SOFTWARE IS PROVIDED BY GOODDATA ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
 * NON-INFRINGEMENT, ARE DISCLAIMED.  IN NO EVENT SHALL ORACLE BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

PARSER_BEGIN(DIScriptParser)

package com.gooddata.processor.parser;

import java.io.FileReader;
import java.io.Reader;
import org.apache.log4j.Logger;
import java.util.List;
import java.util.ArrayList;
import java.util.Properties;

import org.gooddata.processor.Command;

public class DIScriptParser {

    private static Logger l = Logger.getLogger(DIScriptParser.class);

   
}
PARSER_END(DIScriptParser) 

/**  And now, the actual parsing specifications...... */

/** Skip these characters, they are considered "white space" **/
SKIP :                              
{
    " "
    | "\t"
    | "\r"
    | "\n"

}


TOKEN: /*RESERVED TOKENS FOR UQL */
{
      <SEMICOLON: ";">
   |  <COMMA:  ",">
   |  <LPAREN: "(">
   |  <RPAREN: ")">
   |  <EQUALS: "=">
   
}

TOKEN : /* the keywords and comparators - QUOTEDVALUE accounts for escaped quotes as well */
{
        <NAME: (["A"-"Z","a"-"z","0"-"9"])+ >
|       <STRING: "\"" (~["\""])+ "\"" >
|       <COMMENT: "#"(~["\n","\r"])* ("\n"|"\r"|"\r\n")? >
}


List<Command> parse() :
{
    List<Command> commands = new ArrayList<Command>();
    Command c;
}
{
    (<COMMENT> | c = command(){commands.add(c);})* {return commands;}       // a query followed by optional sort
}

Command command() :
{
    Command c;
    Token t;
    Properties p;
}
{            
	t = <NAME>{c=new Command(t.image);}<LPAREN>p = parameters(){c.setParameters(p);}<RPAREN><SEMICOLON>{return c;}
}

Properties parameters() :
{
    Properties prop = new Properties();
    String[] v1;
}
{
	(v1=parameter() {prop.put(v1[0],v1[1]);}(<COMMA>)?)* {return prop;}
}

String[] parameter() :
{
    Token name;
    Token value;
}
{
	name=<NAME><EQUALS>value=<STRING>{return new String[]{name.image,value.image.replace("\"","")};}
}
